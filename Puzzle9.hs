module Puzzle9 where

info :: [Int]
info = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,24,1017,1101,0,36,1006,1101,0,30,1011,1101,26,0,1018,1101,32,0,1015,1101,34,0,1004,1101,0,37,1002,1101,25,0,1012,1102,38,1,1010,1101,29,0,1019,1101,308,0,1029,1102,1,696,1027,1102,1,429,1022,1102,1,21,1005,1102,1,33,1013,1101,39,0,1008,1102,20,1,1009,1101,0,652,1025,1102,313,1,1028,1101,0,31,1003,1102,661,1,1024,1101,35,0,1016,1101,0,23,1000,1102,28,1,1014,1102,0,1,1020,1102,27,1,1007,1101,0,1,1021,1102,22,1,1001,1101,703,0,1026,1101,0,422,1023,109,-5,2101,0,9,63,1008,63,31,63,1005,63,205,1001,64,1,64,1105,1,207,4,187,1002,64,2,64,109,6,2102,1,3,63,1008,63,37,63,1005,63,227,1105,1,233,4,213,1001,64,1,64,1002,64,2,64,109,11,21108,40,40,3,1005,1015,255,4,239,1001,64,1,64,1106,0,255,1002,64,2,64,109,-3,21107,41,40,2,1005,1011,275,1001,64,1,64,1105,1,277,4,261,1002,64,2,64,109,4,2107,28,-6,63,1005,63,297,1001,64,1,64,1106,0,299,4,283,1002,64,2,64,109,15,2106,0,0,4,305,1106,0,317,1001,64,1,64,1002,64,2,64,109,-23,2108,22,4,63,1005,63,337,1001,64,1,64,1105,1,339,4,323,1002,64,2,64,109,6,21101,42,0,0,1008,1011,40,63,1005,63,363,1001,64,1,64,1105,1,365,4,345,1002,64,2,64,109,-17,1207,7,21,63,1005,63,381,1105,1,387,4,371,1001,64,1,64,1002,64,2,64,109,14,1201,-1,0,63,1008,63,25,63,1005,63,407,1105,1,413,4,393,1001,64,1,64,1002,64,2,64,109,15,2105,1,0,1001,64,1,64,1105,1,431,4,419,1002,64,2,64,109,-23,2101,0,6,63,1008,63,36,63,1005,63,453,4,437,1106,0,457,1001,64,1,64,1002,64,2,64,109,10,2108,21,-5,63,1005,63,475,4,463,1106,0,479,1001,64,1,64,1002,64,2,64,109,-3,1201,2,0,63,1008,63,20,63,1005,63,505,4,485,1001,64,1,64,1105,1,505,1002,64,2,64,109,4,2107,35,-5,63,1005,63,527,4,511,1001,64,1,64,1105,1,527,1002,64,2,64,109,15,1206,-5,543,1001,64,1,64,1105,1,545,4,533,1002,64,2,64,109,-8,1205,3,563,4,551,1001,64,1,64,1106,0,563,1002,64,2,64,109,-5,1206,7,581,4,569,1001,64,1,64,1105,1,581,1002,64,2,64,109,-8,1207,-3,38,63,1005,63,599,4,587,1105,1,603,1001,64,1,64,1002,64,2,64,109,19,1205,-4,619,1001,64,1,64,1105,1,621,4,609,1002,64,2,64,109,-13,1208,-4,27,63,1005,63,639,4,627,1105,1,643,1001,64,1,64,1002,64,2,64,109,5,2105,1,8,4,649,1001,64,1,64,1106,0,661,1002,64,2,64,109,-16,1202,4,1,63,1008,63,34,63,1005,63,683,4,667,1106,0,687,1001,64,1,64,1002,64,2,64,109,26,2106,0,1,1001,64,1,64,1105,1,705,4,693,1002,64,2,64,109,-9,21102,43,1,-7,1008,1010,46,63,1005,63,725,1105,1,731,4,711,1001,64,1,64,1002,64,2,64,109,-26,1202,9,1,63,1008,63,26,63,1005,63,755,1001,64,1,64,1105,1,757,4,737,1002,64,2,64,109,34,21108,44,43,-8,1005,1017,773,1106,0,779,4,763,1001,64,1,64,1002,64,2,64,109,-15,21102,45,1,1,1008,1011,45,63,1005,63,801,4,785,1106,0,805,1001,64,1,64,1002,64,2,64,109,-14,1208,10,35,63,1005,63,821,1106,0,827,4,811,1001,64,1,64,1002,64,2,64,109,17,2102,1,-4,63,1008,63,20,63,1005,63,853,4,833,1001,64,1,64,1106,0,853,1002,64,2,64,109,6,21107,46,47,-4,1005,1015,871,4,859,1105,1,875,1001,64,1,64,1002,64,2,64,109,-10,21101,47,0,4,1008,1013,47,63,1005,63,901,4,881,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21102,1,915,0,1106,0,922,21201,1,37790,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,1,942,0,1106,0,922,22102,1,1,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1105,1,968,21201,-2,0,-2,109,-3,2105,1,0]
info1 :: [Int]
info1 = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0]
example4 :: [Int]
--          4     3       2               1 
example4 = [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99]

ex55 :: [Int]
ex55 = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]

ex5 :: [Int]
ex5 = [3,225,1,225,6,6,1100,1,238,225,104,0,1002,148,28,224,1001,224,-672,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1102,8,21,225,1102,13,10,225,1102,21,10,225,1102,6,14,225,1102,94,17,225,1,40,173,224,1001,224,-90,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,2,35,44,224,101,-80,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,26,94,224,101,-120,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1001,52,70,224,101,-87,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,16,92,225,1101,59,24,225,102,83,48,224,101,-1162,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,80,10,225,101,5,143,224,1001,224,-21,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1102,94,67,224,101,-6298,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,102,2,223,223,1005,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,359,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,389,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,419,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,449,1001,223,1,223,8,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,479,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,494,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,554,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,569,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,614,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226]

example :: [Int]
example = [1102,34915192,34915192,7,4,7,99,0]

example1 :: [Int]
example1 = [1,1,1,4,99,5,6,0,99]

example2 :: [Int]
example2 = [104,1125899906842624,99]

int2arr :: Int -> [Int]
int2arr 0 = []
int2arr x = int2arr (x `div` 10) ++ [x `mod` 10]

zeros :: Int -> [Int]
zeros 0 = []
zeros x = 0 : zeros (x-1)

int2istr :: Int -> [Int]
int2istr xs = reverse ((zeros (5 - (length exp))) ++ exp)
            where
                exp = int2arr xs

moderead :: [Int] -> Int -> Int -> Int -> Int
moderead xs i m b | m == 0    = xs!!(xs!!i)
                  | m == 1    = xs!!i
                  | m == 2    = xs!!(b+(xs!!i))
                  | otherwise = -1

modewrite :: [Int] -> Int -> Int -> Int -> Int
modewrite xs i m b | m == 0    = xs!!i
                   | m == 2    = b+(xs!!i)
                   | otherwise = -1

somma :: [Int] -> Int -> [Int] -> Int -> [Int] 
somma xs i istr b= substitute xs (modewrite xs (i+3) (istr!!4) b) ((moderead xs (i+1) (istr!!2) b) + (moderead xs (i+2) (istr!!3) b))

prodotto :: [Int] -> Int -> [Int] -> Int -> [Int]
prodotto xs i istr b = substitute xs (modewrite xs (i+3) (istr!!4) b) ((moderead xs (i+1) (istr!!2) b) * (moderead xs (i+2) (istr!!3) b))

inputistr :: [Int] -> Int -> [Int] -> Int -> [Int] -> [Int]
inputistr xs i istr b inp= substitute xs (modewrite xs (i+1) (istr!!2) b) (head inp)

outputistr :: [Int] -> Int -> [Int] -> Int ->  Int
outputistr xs i istr b= moderead xs (i+1) (istr!!2) b

notequal0 :: [Int] -> Int -> [Int] -> Int -> Int
notequal0 xs i istr b | (moderead xs (i+1) (istr!!2) b) /= 0 = moderead xs (i+2) (istr!!3) b
                      | otherwise = i+3

equal0 :: [Int] -> Int -> [Int] -> Int -> Int
equal0 xs i istr b | (moderead xs (i+1) (istr!!2) b) == 0 = moderead xs (i+2) (istr!!3) b
                   | otherwise = i+3

less :: [Int] -> Int -> [Int] -> Int -> [Int] 
less xs i istr b | (moderead xs (i+1) (istr!!2) b) < (moderead xs (i+2) (istr!!3) b) = substitute xs (modewrite xs (i+3) (istr!!4) b) 1
                 | otherwise = substitute xs (modewrite xs (i+3) (istr!!4) b) 0

equal :: [Int] -> Int -> [Int] -> Int -> [Int]
equal xs i istr b | (moderead xs (i+1) (istr!!2) b) == (moderead xs (i+2) (istr!!3) b) = substitute xs (modewrite xs (i+3) (istr!!4) b) 1
                  | otherwise = substitute xs (modewrite xs (i+3) (istr!!4) b) 0

upbase :: [Int] -> Int -> [Int] -> Int -> Int
upbase xs i istr b = b + (moderead xs (i+1) (istr!!2) b)

substitute :: [Int] -> Int -> Int -> [Int]
substitute xs i v = subgood xs v 0 i

subgood :: [Int] -> Int -> Int -> Int -> [Int]
subgood [] v _ _ = [v]
subgood (x:xs) v c a | c == a    = v:xs
                     | otherwise = x:(subgood xs v (c+1) a)

op :: [Int] -> [Int] -> Int -> Int -> [Int]
op inp xs i b| istr!!0 == 1 && istr!!1 == 0 = (op inp (somma xs i istr b) (i+4) b)
             | istr!!0 == 2 && istr!!1 == 0 = (op inp (prodotto xs i istr b) (i+4) b)
             | istr!!0 == 3 && istr!!1 == 0 = (op (drop 1 inp) (inputistr xs i istr b inp) (i+2) b)
             | istr!!0 == 4 && istr!!1 == 0 = (outputistr xs i istr b):(op inp xs (i+2) b)
             | istr!!0 == 5 && istr!!1 == 0 = (op inp xs (notequal0 xs i istr b) b)
             | istr!!0 == 6 && istr!!1 == 0 = (op inp xs (equal0 xs i istr b) b)
             | istr!!0 == 7 && istr!!1 == 0 = (op inp (less xs i istr b) (i+4) b)
             | istr!!0 == 8 && istr!!1 == 0 = (op inp (equal xs i istr b) (i+4) b)
             | istr!!0 == 9 && istr!!1 == 0 = (op inp xs (i+2) (upbase xs i istr b))
             | otherwise                    = []
             where
                istr = int2istr (xs!!i)
cosebele :: [Int] -> [Int] -> [Int]
cosebele inp prog = op inp (prog++[0| x <- [0..]]) 0 0