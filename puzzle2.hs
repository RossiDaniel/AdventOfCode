
info :: [Int]
info = [1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,19,5,23,2,23,6,27,1,27,5,31,2,6,31,35,1,5,35,39,2,39,9,43,1,43,5,47,1,10,47,51,1,51,6,55,1,55,10,59,1,59,6,63,2,13,63,67,1,9,67,71,2,6,71,75,1,5,75,79,1,9,79,83,2,6,83,87,1,5,87,91,2,6,91,95,2,95,9,99,1,99,6,103,1,103,13,107,2,13,107,111,2,111,10,115,1,115,6,119,1,6,119,123,2,6,123,127,1,127,5,131,2,131,6,135,1,135,2,139,1,139,9,0,99,2,14,0,0]
type State = ([Int],Int)

example :: [Int]
example = [1,9,10,3,2,3,11,0,99,30,40,50]

example1 :: [Int]
example1 = [1,1,1,4,99,5,6,0,99]

example2 :: [Int]
example2 = [2,4,4,5,99,0]

somma :: [Int] -> Int -> [Int]
somma xs i = (take (xs!!(i+3)) xs) ++ [((xs!!(xs!!(i+1))) + (xs!!(xs!!(i+2))))] ++ (drop ((xs!!(i+3))+1) xs)

prodotto :: [Int] -> Int -> [Int]
prodotto xs i = (take (xs!!(i+3)) xs) ++ [((xs!!(xs!!(i+1))) * (xs!!(xs!!(i+2))))] ++ (drop ((xs!!(i+3))+1) xs)

op :: [Int] -> Int -> [Int]
op xs i | (xs!!i) == 1 = op (somma xs i) (i+4)
        | (xs!!i) == 2 = op (prodotto xs i) (i+4)
        | otherwise    = xs

memory :: Int -> Int -> [Int] -> [Int]
memory x y xs = op ((take 1 xs) ++ [x] ++ [y] ++ (drop 3 xs)) 0

result = [(x,y) | x <- [1..100], y <- [1..100], (((memory x y info)!!0) == 19690720)]  